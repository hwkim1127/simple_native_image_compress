// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/compress.dart';
import 'api/constants.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class NativeImageCompressApiImplPlatform
    extends BaseApiImpl<NativeImageCompressWire> {
  NativeImageCompressApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  CompressFormat dco_decode_box_autoadd_compress_format(dynamic raw);

  @protected
  FilterType dco_decode_box_autoadd_filter_type(dynamic raw);

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw);

  @protected
  CompressFormat dco_decode_compress_format(dynamic raw);

  @protected
  FilterType dco_decode_filter_type(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  ImageCompress dco_decode_image_compress(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  CompressFormat? dco_decode_opt_box_autoadd_compress_format(dynamic raw);

  @protected
  FilterType? dco_decode_opt_box_autoadd_filter_type(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  CompressFormat sse_decode_box_autoadd_compress_format(
      SseDeserializer deserializer);

  @protected
  FilterType sse_decode_box_autoadd_filter_type(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  CompressFormat sse_decode_compress_format(SseDeserializer deserializer);

  @protected
  FilterType sse_decode_filter_type(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  ImageCompress sse_decode_image_compress(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  CompressFormat? sse_decode_opt_box_autoadd_compress_format(
      SseDeserializer deserializer);

  @protected
  FilterType? sse_decode_opt_box_autoadd_filter_type(
      SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_compress_format(
      CompressFormat self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_filter_type(
      FilterType self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_compress_format(
      CompressFormat self, SseSerializer serializer);

  @protected
  void sse_encode_filter_type(FilterType self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_image_compress(ImageCompress self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_compress_format(
      CompressFormat? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_filter_type(
      FilterType? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}

// Section: wire_class

class NativeImageCompressWire implements BaseWire {
  factory NativeImageCompressWire.fromExternalLibrary(ExternalLibrary lib) =>
      NativeImageCompressWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeImageCompressWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;
}
